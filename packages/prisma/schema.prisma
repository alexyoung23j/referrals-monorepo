// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// The email service will handle each of these cases differently
enum EmailJobType {
    REFERRAL_REMINDER // Email sent to the referrer to remind them to make the referral
    REFERRAL_REMINDER_NOTIFICATION // Email sent to the job seeker to notify them the referrer has set a reminder
    REFERRAL_CONFIRMATION // Email sent to referrer after they succesfully refer
    REFERRAL_CONFIRMATION_NOTIFICATION // Email sent to job seeker after they have been referred
    MESSAGE_FROM_REFERRER // Email sent to job seeker with a message from the referrer
}

enum EmailJobStatus {
    QUEUED
    CANCELLED
    SENT
    FAILED
}

model EmailJob {
    id                        String           @id @default(cuid())
    toAddress                 String
    body                      String
    attachmentUrls            String[]
    toCC                      String[]
    associatedReferralRequest ReferralRequest? @relation(fields: [referralRequestId], references: [id])
    referralRequestId         String?
    emailType                 EmailJobType
    status                    EmailJobStatus
    scheduledAt               DateTime?
    sentAt                    DateTime?
    createdAt                 DateTime         @default(now())
    updatedAt                 DateTime         @updatedAt
}

model Company {
    id              String            @id @default(cuid())
    name            String
    logoUrl         String?
    isCreatedByUser Boolean
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    ReferralRequest ReferralRequest[]
    JobExperience   JobExperience[]
}

enum ReferralRequestStatus {
    COMMITTED
    COMPLETED
    REJECTED
    OPEN
}

model ReferralRequest {
    id                    String                 @id @default(cuid())
    company               Company                @relation(fields: [companyId], references: [id])
    companyId             String
    requester             User                   @relation(fields: [requesterId], references: [id])
    requesterId           String
    jobTitle              String?
    status                ReferralRequestStatus?
    isAnyOpenRole         Boolean
    jobPostingLink        String?
    referrer              NonLoggedInUser?       @relation(fields: [notLoggedInReferrerId], references: [id])
    notLoggedInReferrerId String?
    referrerUserId        String? // only if the referrer happens to be a user on the platform
    createdAt             DateTime               @default(now())
    updatedAt             DateTime               @updatedAt
    Link                  Link[]
    EmailJob              EmailJob[]
}

model NonLoggedInUser {
    id              String            @id @default(cuid())
    email           String            @unique
    name            String?
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    ReferralRequest ReferralRequest[]
}

model JobExperience {
    id                String      @id @default(cuid())
    userProfile       UserProfile @relation(fields: [userProfileId], references: [id])
    userProfileId     String
    company           Company?    @relation(fields: [companyId], references: [id])
    companyId         String?
    title             String?
    description       String?
    startDate         DateTime?
    endDate           DateTime?
    currentlyWorkHere Boolean?
    createdAt         DateTime    @default(now())
    updatedAt         DateTime    @updatedAt
}

model UserProfile {
    id               String          @id @default(cuid())
    user             User            @relation(fields: [userId], references: [id])
    userId           String
    avatarUrl        String?
    firstName        String?
    lastName         String?
    publicEmail      String?
    currentRoleTitle String?
    twitterUrl       String?
    personalSiteUrl  String?
    currentLocation  String?
    education        String?
    defaultBlurb     String?
    resumeUrl        String?
    linkedInUrl      String?
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
    JobExperience    JobExperience[]
}

model Link {
    id                      String           @id // This has to be passed in by the request
    user                    User             @relation(fields: [userId], references: [id])
    userId                  String
    specificRequest         ReferralRequest? @relation(fields: [referralRequestId], references: [id]) // If this link associated with just one referral request
    referralRequestId       String?
    blurb                   String?
    blurbAuthorName         String?
    createdById             String? // Added only if the link was created by a user on the platform
    isDefaultLinkForRequest Boolean          @default(false) // Was this the link the original "primary" link for this request
    createdByLoggedInUser   Boolean
    createdAt               DateTime         @default(now())
    updatedAt               DateTime         @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String            @id @default(cuid())
    name            String?
    email           String?           @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    UserProfile     UserProfile[]
    Link            Link[]
    ReferralRequest ReferralRequest[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
